{"ast":null,"code":"// Create this file: frontend/src/utils/diceUtils.js\n\n// Roll a single die\nexport const rollDie = sides => {\n  return Math.floor(Math.random() * sides) + 1;\n};\n\n// Roll multiple dice\nexport const rollDice = (count, sides) => {\n  const rolls = [];\n  for (let i = 0; i < count; i++) {\n    rolls.push(rollDie(sides));\n  }\n  return rolls;\n};\n\n// Calculate ability modifier from ability score\nexport const getAbilityModifier = score => {\n  return Math.floor((score - 10) / 2);\n};\n\n// Format modifier for display (+3, -1, etc.)\nexport const formatModifier = modifier => {\n  return modifier >= 0 ? `+${modifier}` : `${modifier}`;\n};\n\n// Parse dice notation (like \"1d20+3\" or \"2d6\")\nexport const parseDiceNotation = notation => {\n  const match = notation.match(/(\\d+)d(\\d+)(?:([+-])(\\d+))?/i);\n  if (!match) return null;\n  return {\n    count: parseInt(match[1], 10),\n    sides: parseInt(match[2], 10),\n    modifier: match[3] && match[4] ? match[3] === '+' ? parseInt(match[4], 10) : -parseInt(match[4], 10) : 0\n  };\n};\n\n// Roll dice from notation\nexport const rollFromNotation = notation => {\n  const parsed = parseDiceNotation(notation);\n  if (!parsed) return null;\n  const rolls = rollDice(parsed.count, parsed.sides);\n  const total = rolls.reduce((sum, roll) => sum + roll, 0) + parsed.modifier;\n  return {\n    rolls,\n    modifier: parsed.modifier,\n    total,\n    notation\n  };\n};\n\n// Roll ability check (1d20 + ability modifier)\nexport const rollAbilityCheck = abilityScore => {\n  const modifier = getAbilityModifier(abilityScore);\n  const roll = rollDie(20);\n  return {\n    roll,\n    modifier,\n    total: roll + modifier,\n    formatted: `1d20${formatModifier(modifier)} = ${roll}${formatModifier(modifier)} = ${roll + modifier}`\n  };\n};","map":{"version":3,"names":["rollDie","sides","Math","floor","random","rollDice","count","rolls","i","push","getAbilityModifier","score","formatModifier","modifier","parseDiceNotation","notation","match","parseInt","rollFromNotation","parsed","total","reduce","sum","roll","rollAbilityCheck","abilityScore","formatted"],"sources":["C:/Users/braed/OneDrive/Desktop/LoreKeep/frontend/src/utils/diceUtils.js"],"sourcesContent":["// Create this file: frontend/src/utils/diceUtils.js\r\n\r\n// Roll a single die\r\nexport const rollDie = (sides) => {\r\n  return Math.floor(Math.random() * sides) + 1;\r\n};\r\n\r\n// Roll multiple dice\r\nexport const rollDice = (count, sides) => {\r\n  const rolls = [];\r\n  for (let i = 0; i < count; i++) {\r\n    rolls.push(rollDie(sides));\r\n  }\r\n  return rolls;\r\n};\r\n\r\n// Calculate ability modifier from ability score\r\nexport const getAbilityModifier = (score) => {\r\n  return Math.floor((score - 10) / 2);\r\n};\r\n\r\n// Format modifier for display (+3, -1, etc.)\r\nexport const formatModifier = (modifier) => {\r\n  return modifier >= 0 ? `+${modifier}` : `${modifier}`;\r\n};\r\n\r\n// Parse dice notation (like \"1d20+3\" or \"2d6\")\r\nexport const parseDiceNotation = (notation) => {\r\n  const match = notation.match(/(\\d+)d(\\d+)(?:([+-])(\\d+))?/i);\r\n  if (!match) return null;\r\n  \r\n  return {\r\n    count: parseInt(match[1], 10),\r\n    sides: parseInt(match[2], 10),\r\n    modifier: match[3] && match[4] ? \r\n      (match[3] === '+' ? parseInt(match[4], 10) : -parseInt(match[4], 10)) : 0\r\n  };\r\n};\r\n\r\n// Roll dice from notation\r\nexport const rollFromNotation = (notation) => {\r\n  const parsed = parseDiceNotation(notation);\r\n  if (!parsed) return null;\r\n  \r\n  const rolls = rollDice(parsed.count, parsed.sides);\r\n  const total = rolls.reduce((sum, roll) => sum + roll, 0) + parsed.modifier;\r\n  \r\n  return {\r\n    rolls,\r\n    modifier: parsed.modifier,\r\n    total,\r\n    notation\r\n  };\r\n};\r\n\r\n// Roll ability check (1d20 + ability modifier)\r\nexport const rollAbilityCheck = (abilityScore) => {\r\n  const modifier = getAbilityModifier(abilityScore);\r\n  const roll = rollDie(20);\r\n  return {\r\n    roll,\r\n    modifier,\r\n    total: roll + modifier,\r\n    formatted: `1d20${formatModifier(modifier)} = ${roll}${formatModifier(modifier)} = ${roll + modifier}`\r\n  };\r\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,OAAO,GAAIC,KAAK,IAAK;EAChC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,KAAK,CAAC,GAAG,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMI,QAAQ,GAAGA,CAACC,KAAK,EAAEL,KAAK,KAAK;EACxC,MAAMM,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9BD,KAAK,CAACE,IAAI,CAACT,OAAO,CAACC,KAAK,CAAC,CAAC;EAC5B;EACA,OAAOM,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAIC,KAAK,IAAK;EAC3C,OAAOT,IAAI,CAACC,KAAK,CAAC,CAACQ,KAAK,GAAG,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EAC1C,OAAOA,QAAQ,IAAI,CAAC,GAAG,IAAIA,QAAQ,EAAE,GAAG,GAAGA,QAAQ,EAAE;AACvD,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,OAAO;IACLV,KAAK,EAAEW,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC7Bf,KAAK,EAAEgB,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC7BH,QAAQ,EAAEG,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,GAC3BA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAACC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAI;EAC5E,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAIH,QAAQ,IAAK;EAC5C,MAAMI,MAAM,GAAGL,iBAAiB,CAACC,QAAQ,CAAC;EAC1C,IAAI,CAACI,MAAM,EAAE,OAAO,IAAI;EAExB,MAAMZ,KAAK,GAAGF,QAAQ,CAACc,MAAM,CAACb,KAAK,EAAEa,MAAM,CAAClB,KAAK,CAAC;EAClD,MAAMmB,KAAK,GAAGb,KAAK,CAACc,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC,GAAGJ,MAAM,CAACN,QAAQ;EAE1E,OAAO;IACLN,KAAK;IACLM,QAAQ,EAAEM,MAAM,CAACN,QAAQ;IACzBO,KAAK;IACLL;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMS,gBAAgB,GAAIC,YAAY,IAAK;EAChD,MAAMZ,QAAQ,GAAGH,kBAAkB,CAACe,YAAY,CAAC;EACjD,MAAMF,IAAI,GAAGvB,OAAO,CAAC,EAAE,CAAC;EACxB,OAAO;IACLuB,IAAI;IACJV,QAAQ;IACRO,KAAK,EAAEG,IAAI,GAAGV,QAAQ;IACtBa,SAAS,EAAE,OAAOd,cAAc,CAACC,QAAQ,CAAC,MAAMU,IAAI,GAAGX,cAAc,CAACC,QAAQ,CAAC,MAAMU,IAAI,GAAGV,QAAQ;EACtG,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}